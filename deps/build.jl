# this is the build.jl file generated by BinaryBuilder.jl
using BinaryProvider # requires BinaryProvider 0.3.0 or later
using BinDeps

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
  LibraryProduct(prefix, ["libasl"], :libasl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaSmoothOptimizers/ThinASLBuilder/releases/download/v0.2.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.aarch64-linux-gnu.tar.gz", "6d03e1155960d77bdbc8eaed07ccf141a1f078fb4d1fbfff3bbdb88a5c747007"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.aarch64-linux-musl.tar.gz", "78b7e0a065f13a95e329b78f65a9ed47eb6f00050609cda0039053d6ff398045"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ThinASLBuilder.v0.1.0.arm-linux-gnueabihf.tar.gz", "7071a4c8478fd393d5aad9663034811f6a6bf2db502327b058d00b3ec366f356"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ThinASLBuilder.v0.1.0.arm-linux-musleabihf.tar.gz", "781199dc1c862274bdbc992af01e9eea40391cf26a87d5457d64cd4bc9f23367"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-linux-gnu.tar.gz", "dd5279545a6bca3d79cb8c407eb3f6853da89b66e04a8fcc0b74c0989c7e8a35"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-linux-musl.tar.gz", "9c49751fd31612583374fe8805225c99342c90ec43562c86558ef86ebb4e18b8"),
    Windows(:i686) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-w64-mingw32.tar.gz", "d69be7a7e7ff4fc3caf8391ef47ec04249cc5c807de75d9af2a4cec2aa1fc00f"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.powerpc64le-linux-gnu.tar.gz", "50b14a1fbd24b6ac8487c925f0a6eb07ba5722080f0e1f9934070c17765a8787"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-linux-gnu.tar.gz", "3a21a393e91ac718eecdb806cfb39e657c46f8497c3c917d6fdee4659e598592"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-linux-musl.tar.gz", "052d7a3a8685863433b85b1964a7c31a6668c89c6c31e90665f11e8401d070dc"),
    FreeBSD(:x86_64) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "0b9fe60ed3a0e66b4482f8a34046a3b7ade5f9a0504400e6bb76954cfa686d41"),
    Windows(:x86_64) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-w64-mingw32.tar.gz", "bbfe1fb63321d2d6e2a297706ba3bf5e9da06f69b9f93ce61e4f191f8619c981"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
try

  dl_info = choose_download(download_info, platform_key_abi())

  # If we have a download, and we are unsatisfied (or the version we're
  # trying to install is not itself installed) then load it up!
  if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
  end

  # Write out a deps.jl file that will contain mappings for our products
  write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

catch

  # if dl_info === nothing && unsatisfied
  @warn("no binaries for platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\"): attempting source build")

  @BinDeps.setup

  libasl = library_dependency("libasl")

  # General settings.
  so = "so"
  all_load = "--whole-archive"
  noall_load = "--no-whole-archive"

  @static if Sys.isapple()
    so = "dylib"
    all_load = "-all_load"
    noall_load = "-noall_load"
  end

  @static if Sys.iswindows()
    so = "dll"
    push!(BinDeps.defaults, BinDeps.BuildProcess)
  end

  provides(Sources,
           URI("http://netlib.org/ampl/solvers.tgz"),
           libasl,
           SHA="16495404313c54c462c806a4b3e5c80805b23d36cabc12d7796d7a1b6be08c20",
           unpacked_dir="solvers")

  depsdir = BinDeps.depsdir(libasl)
  rcdir = joinpath(depsdir, "rc")
  libdir = joinpath(depsdir, "usr", "lib")
  srcdir = joinpath(depsdir, "src", "solvers")
  aslinterface_src = joinpath(rcdir, "aslinterface.cc")
  makefile_mingw = joinpath(rcdir, "makefile.mingw")
  arith_mingw = joinpath(rcdir, "arith$(Sys.WORD_SIZE).h")

  provides(SimpleBuild,
           (@build_steps begin
              GetSources(libasl)
              CreateDirectory(libdir)
              (@build_steps begin
                ChangeDirectory(srcdir)
                (@build_steps begin
                  `make -f makefile.u CC=gcc CFLAGS="-O -fPIC"`
                  `g++ -fPIC -shared -I$srcdir -I$rcdir $aslinterface_src -Wl,$all_load amplsolver.a -Wl,$noall_load -o libasl.$so`
                  `mv libasl.$so $libdir`
                end)
              end)
            end), libasl, os = :Unix)

  provides(SimpleBuild,
           (@build_steps begin
              GetSources(libasl)
              CreateDirectory(libdir)
              (@build_steps begin
                ChangeDirectory(srcdir)
                (@build_steps begin
                  `cp $arith_mingw arith.h`
                  `cp details.c0 details.c`
                  `mingw32-make -f $makefile_mingw CC=gcc CFLAGS="-O -fPIC"`
                  `g++ -fPIC -shared -I$srcdir -I$rcdir $aslinterface_src -Wl,$all_load amplsolver.a -Wl,$noall_load -o libasl.$so`
                  `mv libasl.$so $libdir`
                end)
              end)
            end), libasl, os = :Windows)

  @BinDeps.install Dict(:libasl => :libasl)

end
