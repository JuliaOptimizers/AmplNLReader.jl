using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libasl"], :libasl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/ASL_jll.jl/releases/download/ASL-v0.1.0+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.0.aarch64-linux-gnu.tar.gz", "8136af59a849f7d3bdf75f0f011275513856a89221383bb383e988f9f9ef6672"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/ASL.v0.1.0.aarch64-linux-musl.tar.gz", "80fd19547f967680fe4b6d7e1eab3e1e3a32f2d615fecab0af01d7821ea1f0a0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.0.arm-linux-gnueabihf.tar.gz", "e849476fa721e307c3ee019ae907273e9441861f359fd3c588759d83418aab5a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.0.arm-linux-musleabihf.tar.gz", "528b63aad78bd1ea887469e27c64edeb71f05b95dd52d47966c139ee56783797"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/ASL.v0.1.0.i686-linux-gnu.tar.gz", "9d3ed9e0e0829284c3ee10d568a46eaba6bd6cf867672dbe6506f283e16bca20"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/ASL.v0.1.0.i686-linux-musl.tar.gz", "8af5070c184bc9c967e165d94375bf87020668897f1f0d52149a51971080e546"),
    Windows(:i686) => ("$bin_prefix/ASL.v0.1.0.i686-w64-mingw32.tar.gz", "0ded647af7d42dcb6f8d832fed890a7b7341c1188108921ccbd36891c8fce7ab"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ASL.v0.1.0.powerpc64le-linux-gnu.tar.gz", "433894db95a4688acc2be376d759b882bff4ed7c52b9867ccfc72aeb2e457af4"),
    MacOS(:x86_64) => ("$bin_prefix/ASL.v0.1.0.x86_64-apple-darwin14.tar.gz", "bbdb344b48215170257c58441c19202024e3f037babbd45117269798e8826857"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.0.x86_64-linux-gnu.tar.gz", "828de71a0c40e9b9fb624223148f1d42409d4330644a58501a2bcfd9dbd92362"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/ASL.v0.1.0.x86_64-linux-musl.tar.gz", "88f02e9865c39cc7b9a154c8439f77da1feb0891b4e9e243d56198079315c906"),
    FreeBSD(:x86_64) => ("$bin_prefix/ASL.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "d4e554bdc483d648148957e8d75ee94720a33d025352de35f59b518b46803d9d"),
    Windows(:x86_64) => ("$bin_prefix/ASL.v0.1.0.x86_64-w64-mingw32.tar.gz", "9c304b457036dcc2591f252a51300c6a358999197afbe2620db8e0af2435ab50"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
