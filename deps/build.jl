# this is the build.jl file generated by BinaryBuilder.jl
using BinaryProvider # requires BinaryProvider 0.3.0 or later
using BinDeps

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
  LibraryProduct(prefix, ["libasl"], :libasl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaSmoothOptimizers/ThinASLBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
  Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.aarch64-linux-gnu.tar.gz", "4a036bfa80019c2b82f1871d7d6aefa1eb9c643ada42bfe236a09bff59ea838d"),
  Linux(:aarch64, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.aarch64-linux-musl.tar.gz", "8bbbd3ed1453549ba50d16f2a99fd6192b609bea5c4c934edab9036636c8bbcb"),
  Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ThinASLBuilder.v0.1.0.arm-linux-gnueabihf.tar.gz", "94085545e6a48c989336c83021aaaa6de776f953e8f40cfb7869ff45af0a7c8a"),
  Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ThinASLBuilder.v0.1.0.arm-linux-musleabihf.tar.gz", "5a3ab43083a7ef4331f4119afaaf3bef06cf6bc2d56c8d36063304aebd794069"),
  Linux(:i686, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-linux-gnu.tar.gz", "cc8a71370ecac5ff119f1706330330fc5447f40bee1f124ac0be08ca541940d7"),
  Linux(:i686, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-linux-musl.tar.gz", "07b6d84e43b135d574e77dca03151c61a447757a6b037c827cd8048c133da8ad"),
  Windows(:i686) => ("$bin_prefix/ThinASLBuilder.v0.1.0.i686-w64-mingw32.tar.gz", "dc8eebd769c4cfd22537f1dd8ef622017b6f9611ed9155864f24132b0cc83ce0"),
  Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.powerpc64le-linux-gnu.tar.gz", "7e1f91f4d4f5046e40a40dc1ad447e699af0362a03e3e32940e5322bdbc068f2"),
  Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-linux-gnu.tar.gz", "11c8e6168d16826be9a073d7afe25050bbd80cbb46c492a9901ca093eccbd5f7"),
  Linux(:x86_64, libc=:musl) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-linux-musl.tar.gz", "783e107650806ba2196f4d6b1625dde1882b5996e31ba80edd3952ff55270808"),
  Windows(:x86_64) => ("$bin_prefix/ThinASLBuilder.v0.1.0.x86_64-w64-mingw32.tar.gz", "fc43b5027bc62aa8e9e5712c3f2d8278d23522e4a3abbc298a9ba33d565468ff"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
try

  dl_info = choose_download(download_info, platform_key_abi())

  # If we have a download, and we are unsatisfied (or the version we're
  # trying to install is not itself installed) then load it up!
  if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
  end

  # Write out a deps.jl file that will contain mappings for our products
  write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

catch

  # if dl_info === nothing && unsatisfied
  @warn("no binaries for platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\"): attempting source build")

  @BinDeps.setup

  libasl = library_dependency("libasl")

  # General settings.
  so = "so"
  all_load = "--whole-archive"
  noall_load = "--no-whole-archive"

  @static if Sys.isapple()
    so = "dylib"
    all_load = "-all_load"
    noall_load = "-noall_load"
  end

  @static if Sys.iswindows()
    so = "dll"
    push!(BinDeps.defaults, BinDeps.BuildProcess)
  end

  provides(Sources,
           URI("http://netlib.org/ampl/solvers.tgz"),
           libasl,
           SHA="16495404313c54c462c806a4b3e5c80805b23d36cabc12d7796d7a1b6be08c20",
           unpacked_dir="solvers")

  depsdir = BinDeps.depsdir(libasl)
  rcdir = joinpath(depsdir, "rc")
  libdir = joinpath(depsdir, "usr", "lib")
  srcdir = joinpath(depsdir, "src", "solvers")
  aslinterface_src = joinpath(rcdir, "aslinterface.cc")
  makefile_mingw = joinpath(rcdir, "makefile.mingw")
  arith_mingw = joinpath(rcdir, "arith$(Sys.WORD_SIZE).h")
  
  provides(SimpleBuild,
           (@build_steps begin
              GetSources(libasl)
              CreateDirectory(libdir)
              (@build_steps begin
                ChangeDirectory(srcdir)
                (@build_steps begin
                  `make -f makefile.u CC=gcc CFLAGS="-O -fPIC"`
                  `g++ -fPIC -shared -I$srcdir -I$rcdir $aslinterface_src -Wl,$all_load amplsolver.a -Wl,$noall_load -o libasl.$so`
                  `mv libasl.$so $libdir`
                end)
              end)
            end), libasl, os = :Unix)

  provides(SimpleBuild,
           (@build_steps begin
              GetSources(libasl)
              CreateDirectory(libdir)
              (@build_steps begin
                ChangeDirectory(srcdir)
                (@build_steps begin
                  `cp $arith_mingw arith.h`
                  `cp details.c0 details.c`
                  `mingw32-make -f $makefile_mingw CC=gcc CFLAGS="-O -fPIC"`
                  `g++ -fPIC -shared -I$srcdir -I$rcdir $aslinterface_src -Wl,$all_load amplsolver.a -Wl,$noall_load -o libasl.$so`
                  `mv libasl.$so $libdir`
                end)
              end)
            end), libasl, os = :Windows)

  @BinDeps.install Dict(:libasl => :libasl)

end
