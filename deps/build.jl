using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libasl"], :libasl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/ASL_jll.jl/releases/download/ASL-v0.1.1+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.aarch64-linux-gnu.tar.gz", "d7c2b53695c4db416f6ce39e3ddf4d0a8ba3eb78f9b98e0022e0fe4d4be1ac0f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.aarch64-linux-musl.tar.gz", "4e7a3b4482a0b2c53ddd76bdec9eab64e182f347e30e333bb8084a8598ee0ce7"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.1.arm-linux-gnueabihf.tar.gz", "3ce0f347f2526fc9de974a1c887dcc80e5993d65dc0817774251386af89d6aa3"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.1.arm-linux-musleabihf.tar.gz", "5386d2948403d54a38e59642844bb542fbfead70c8df6eb37a63d23e5568086a"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.i686-linux-gnu.tar.gz", "2d7388895bf3ebb3ba9661dd571cd52b925d37305bc6eadaabec300a33bbb33d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.i686-linux-musl.tar.gz", "ffa5707b2af56bff3ceeca363cd1c582a549558c9cc290204754ff59d2dd2ffa"),
    Windows(:i686) => ("$bin_prefix/ASL.v0.1.1.i686-w64-mingw32.tar.gz", "9b58a108c053f5c2ec14a26022c05bca6a62abbc6add9e9c605873ab3c7c8252"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.powerpc64le-linux-gnu.tar.gz", "0175d2c8e8168dccc2cac912d729b76269c7e2fdbe476ba68530c6c8e0749e89"),
    MacOS(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-apple-darwin14.tar.gz", "3e7ba2dd1f0e3165aa702399834f336360b6fb52d05bf12f1d4066ee9f3b6962"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.x86_64-linux-gnu.tar.gz", "a506040fe2aaf1c820380787f0a642327db089e772c98c54b2f380f46ee6bf3b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.x86_64-linux-musl.tar.gz", "300cbd6432b25440b37c7ca5f2ef523390b4b60b0d7fb516c8582d3759aba452"),
    FreeBSD(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-unknown-freebsd11.1.tar.gz", "e7af2012ba80fb80ca64e24a0e6065f98648b2280fe05e82337dfc7df9f6604a"),
    Windows(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-w64-mingw32.tar.gz", "8d4319f370ac92c91c6a5221ef74076ad3902d9679960f0cabd876d71568b838"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
